var searchIndex = JSON.parse('{\
"cache":{"doc":"","t":[17,17,17,17,17,17,3,3,3,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["HIT_PER_SECOND","PKG_NAME","PKG_VERSION","PREFIX_BUCKET_TIMER","PREFIX_SAFETY","BUCKET_EXPIRY_OFFSET","ID","PREFIX_CAPTCHA","PREFIX_BUCKET","on_delete","RedisModule_OnLoad","RedisModule_OnUnload","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","deref","deref","deref","initialize","initialize","initialize"],"q":["cache","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Initial allocation ammount of bucket[bucket::Bucket]","","","bucket timer key prefix","","If buckets perform clean up at x instant, then buckets …","node unique identifier, useful when running in cluster …","counter/captcha key prefix","bucket key prefix","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,1,2,3,1,2,3],"f":[null,null,null,null,null,null,null,null,null,[[["notifyevent",3],["context",3],["str",15]]],[[["c_int",6]],["c_int",6]],[[],["c_int",6]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[],["string",3]],[[],["string",3]],[[]],[[]],[[]]],"p":[[3,"ID"],[3,"PREFIX_CAPTCHA"],[3,"PREFIX_BUCKET"]]}\
}');
initSearch(searchIndex);